{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "调度构建fiber树",
  "steps": [
    {
      "file": "packages/react-reconciler/src/ReactFiberWorkLoop.old.js",
      "description": "获取rootFiber 然后调用ensureRootIsScheduled\n\n只要涉及到需要改变 fiber 的操作(无论是首次渲染或后续更新操作), 最后都会间接调用scheduleUpdateOnFiber, \n所以scheduleUpdateOnFiber函数是输入链路中的必经之路",
      "line": 517
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberWorkLoop.old.js",
      "description": "使用这个方法去调用一个任务\n\n1. 前半部分: 判断是否需要注册新的调度(如果无需新的调度, 会退出函数)\n2. 后半部分: 注册调度任务",
      "line": 674
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberWorkLoop.old.js",
      "description": "注册调度任务 执行回调",
      "line": 723
    },
    {
      "file": "packages/scheduler/src/Scheduler.js",
      "description": "Schedule-1: Shdule暴露的入口  一般转换为别名scheduleCallback 被调用， 返回task的信息",
      "line": 283,
      "selection": {
        "start": {
          "line": 320,
          "character": 7
        },
        "end": {
          "line": 320,
          "character": 14
        }
      }
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberWorkLoop.old.js",
      "description": "这个函数就是Schedule 回调函数  也就是Schedule实际要执行的函数（这个concurrent模式下执行",
      "line": 740,
      "selection": {
        "start": {
          "line": 740,
          "character": 10
        },
        "end": {
          "line": 740,
          "character": 37
        }
      }
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberWorkLoop.old.js",
      "description": "调用fiber构造循环函数",
      "line": 1592
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberWorkLoop.old.js",
      "description": "进入render 阶段\n",
      "line": 780
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberWorkLoop.old.js",
      "description": "Fiber构建循环（以树为数据结构, 从上至下执行深度优先遍历）\n========================================\n这里很有意思  相当于深度遍历一个树  在每棵树上面执行beginWork 和 completeWork 并且返回下一个 tree\n然后在这这个循环函数判断返回的 tree 是否是叶子节点  如果不是 则继续循环往下执行",
      "line": 1635,
      "selection": {
        "start": {
          "line": 1592,
          "character": 7
        },
        "end": {
          "line": 1592,
          "character": 25
        }
      }
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberWorkLoop.old.js",
      "description": "工作单元（构建fiber节点 要注意  beginWork 只是在往下递归时候只是  completeWork 是在往回递归时候执行） \n理解beginWork 和completeWork执行顺序非常重要\n那是如何往下递归的呢\n1. rootFiber \n1. 每一个fiber节点都存储了与之相关联的节点的引用 比如子节点 child  兄弟节点 slibing  父亲节点 return  这里真是通过child和sibling 的关系不断的在rootFiber节点上递归得到所有的子节点",
      "line": 1642
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberBeginWork.old.js",
      "description": "beginWork的工作可以分为两部分：\n==============================\n1. update时：如果current存在，在满足一定条件时可以复用current节点，这样就能克隆current.child作为workInProgress.child，而不需要新建workInProgress.child。\n2. mount时：除fiberRootNode以外，current === null。会根据fiber.tag不同，创建不同类型的子Fiber节点\n\n[参考](https://react.iamkasong.com/process/beginWork.html#%E6%96%B9%E6%B3%95%E6%A6%82%E8%A7%88)",
      "line": 3083
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberBeginWork.old.js",
      "description": "update情况",
      "line": 3108
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberBeginWork.old.js",
      "description": "Mount情况（按理说这里确实是Mount阶段  包括下面调用的函数名也能体现  但是就这个代码逻辑好像是\nupdate也会执行这块的代码  有点疑问\n明白了 因为在current !== null 里面设置了return  所有update阶段是不会执行到这块了 \ncooool!!!!",
      "line": 3319
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberBeginWork.old.js",
      "description": "如果全局的渲染优先级renderLanes不包括fiber.lanes, 证明该fiber节点没有更新, 可以复用.\ndidReceiveUpdate作为后续节点是否需要更新的标志位",
      "line": 3121,
      "selection": {
        "start": {
          "line": 3120,
          "character": 7
        },
        "end": {
          "line": 3120,
          "character": 23
        }
      }
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberWorkLoop.old.js",
      "description": "循环执行完当前节点剩下的工作 然后查看时候有兄弟节点  有就返回兄弟节点  否则返回父亲节点  如此循环直到root节点\n注意！！！\nbebinWork 与completeWork的循环执行逻辑是不一样的",
      "line": 1670,
      "selection": {
        "start": {
          "line": 1671,
          "character": 17
        },
        "end": {
          "line": 1671,
          "character": 25
        }
      }
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberWorkLoop.old.js",
      "description": "completeWork 逻辑正如注释提到的： 执行剩下的工作 然后看是否有兄弟节点 有就返回兄弟节点 没有就返回父亲节点\n这样递归的返回到root节点为止",
      "line": 1672
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberWorkLoop.old.js",
      "description": "调用completeWork",
      "line": 1689
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberWorkLoop.old.js",
      "description": "还有一个问题：作为DOM操作的依据，commit阶段需要找到所有有effectTag的Fiber节点并依次执行effectTag对应操作。难道需要在commit阶段再遍历一次Fiber树寻找effectTag !== null的Fiber节点么？\n\n这显然是很低效的。\n\n这里我有点疑问的是 既然是单链表 为什么还需要处理lastEffect  只处理firstEffect不可以么\n\n为了解决这个问题，在completeWork的上层函数completeUnitOfWork中，每个执行完completeWork且存在effectTag的Fiber节点会被保存在一条被称为effectList的单向链表中。\n\neffectList中第一个Fiber节点保存在fiber.firstEffect，最后一个元素保存在fiber.lastEffect。\n\n类似appendAllChildren，在“归”阶段，所有有effectTag的Fiber节点都会被追加在effectList中，最终形成一条以rootFiber.firstEffect为起点的单向链表。\n\n                       nextEffect         nextEffect\nrootFiber.firstEffect -----------> fiber -----------> fiber\n这样，在commit阶段只需要遍历effectList就能执行所有effect了。\n借用React团队成员Dan Abramov的话：effectList相较于Fiber树，就像圣诞树上挂的那一串彩灯。",
      "line": 1714
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberCompleteWork.old.js",
      "description": "类似beginWork，completeWork也是针对不同fiber.tag调用不同的处理逻辑 主要是处理处理props（属性\n比如事件注册 style ref等",
      "line": 645
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberCompleteWork.old.js",
      "description": "当update时，Fiber节点已经存在对应DOM节点，所以不需要生成DOM节点。需要做的主要是处理props，比如：\n====================\n1. onClick、onChange等回调函数的注册\n2. 处理style prop\n3. 处理DANGEROUSLY_SET_INNER_HTML prop\n4. 处理children prop",
      "line": 703
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberCompleteWork.old.js",
      "description": "mount时的主要逻辑包括三个：\n==================\n1. 为Fiber节点生成对应的DOM节点\n2. 将子孙DOM节点插入刚生成的DOM节点中\n3. 与update逻辑中的updateHostComponent类似的处理props的过程",
      "line": 715
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberCompleteWork.old.js",
      "description": "mount时只会在rootFiber存在Placement effectTag。那么commit阶段是如何通过一次插入DOM操作（对应一个Placement effectTag）将整棵DOM树插入页面的呢？\n\n原因就在于completeWork中的appendAllChildren方法。\n\n由于completeWork属于“归”阶段调用的函数，每次调用appendAllChildren时都会将已生成的子孙DOM节点插入当前生成的DOM节点下。那么当“归”到rootFiber时，我们已经有一个构建好的离屏DOM树",
      "line": 755,
      "selection": {
        "start": {
          "line": 755,
          "character": 11
        },
        "end": {
          "line": 755,
          "character": 28
        }
      }
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberWorkLoop.old.js",
      "description": "调用finishConcurrentRender  代表render阶段结束 ",
      "line": 829,
      "selection": {
        "start": {
          "line": 829,
          "character": 5
        },
        "end": {
          "line": 829,
          "character": 27
        }
      }
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberWorkLoop.old.js",
      "description": "完成render  接下来开启 commit 阶段， 调用 commitRoot方法",
      "line": 841
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberWorkLoop.old.js",
      "description": "获取render优先级",
      "line": 1882,
      "selection": {
        "start": {
          "line": 1883,
          "character": 5
        },
        "end": {
          "line": 1883,
          "character": 19
        }
      }
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberWorkLoop.old.js",
      "description": "commit阶段的主要工作（即Renderer的工作流程）分为三部分：\nbefore mutation阶段（执行DOM操作前）\nmutation阶段（执行DOM操作）\nlayout阶段（执行DOM操作后）",
      "line": 1888
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberWorkLoop.old.js",
      "description": "1. 处理DOM节点渲染/删除后的 autoFocus、blur 逻辑。\n2. 调用getSnapshotBeforeUpdate生命周期钩子。\n3. 调度useEffect（并不是真正的执行useEffect, 这是啥意思）。\n\n突然间发现这个函数其实是根据Effect节点的flags属性判断去做操作的(因为render阶段产生一条effectList 而且每个节点打上了不同的flags标明操作类型，所以commit阶段的操作类型应该都是根据flags来判断操作)",
      "line": 2256
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberCommitWork.old.js",
      "description": "### commit前生命周期相关处理",
      "line": 217,
      "selection": {
        "start": {
          "line": 217,
          "character": 10
        },
        "end": {
          "line": 217,
          "character": 40
        }
      }
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberWorkLoop.old.js",
      "description": "后面两步通过这个函数实现",
      "line": 2286
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberFlags.js",
      "description": "## Commit 阶段flags集合",
      "line": 10,
      "selection": {
        "start": {
          "line": 25,
          "character": 14
        },
        "end": {
          "line": 25,
          "character": 22
        }
      }
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberWorkLoop.old.js",
      "description": "commitMutationEffects会遍历effectList，对每个Fiber节点执行如下三个操作：\n\n1. 根据ContentReset effectTag重置文字节点\n2. 更新ref\n3. 根据effectTag分别处理，其中effectTag包括(Placement | Update | Deletion | Hydrating)\n\n这点有个问题 react fiber其实负责操作fiber tree  最终把这些操作体现在某个属性上  比如stateNote  那react是如何让stateNote这些差异数据同步到页面上你\n\n这就是这个函数的第三步实现的 起对应的类型 调用函数如下\n\n插入DOM节点（Placement）  commitPlacement\n\n更新DOM节点（Update）     commitWork\n\n删除DOM节点（Deletion）   commitDeletion\n\n然后针对不同的类型的fiber节点执行上面的操作\n\n",
      "line": 2302
    },
    {
      "file": "packages/react-reconciler/src/ReactWorkTags.js",
      "description": "这里是fiber 节点类型的分类\n\n- HostComponent               原生dom元素\n- HostText                    原生dom文本\n- MemoComponent               对应被react.memo包裹的组件\n\n这里有个疑问 下面的很多对应的类型还需要验证",
      "line": 37
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberCommitWork.old.js",
      "description": "1. 得到插入位置的父节点\n2. 判断插入位置的节点是否是容器节点\n\n这说明插入并不是都是从根节点里面插入\n\n这里有个问题 \n真实的api这里有几个不同的平台  rn  browser  react art 是如何做到兼容的",
      "line": 1148
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberCommitWork.new.js",
      "description": "真正执行fiber输出的地方 把计算好的stateNote插入页面\n\ninsertOrAppendPlacementNodeIntoContainer  容器节点\n\ninsertOrAppendPlacementNode               非容器节点",
      "line": 1379,
      "selection": {
        "start": {
          "line": 1348,
          "character": 10
        },
        "end": {
          "line": 1348,
          "character": 50
        }
      }
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberWorkLoop.old.js",
      "description": "## workInprogress切换为current\n这是一个非常重要的节点 新旧两个树之前的切换\n1. dom渲染完成 钩子可以方位真是dom 如何不在此时切换  钩子中访问的dom还是上一次渲染的dom",
      "line": 2084
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberWorkLoop.old.js",
      "description": "commitLayoutEffects一共做了两件事：\n\n1. commitLayoutEffectOnFiber（调用生命周期钩子和hook相关操作）\n2. commitAttachRef（赋值 ref）\n\nhttps://react.iamkasong.com/renderer/layout.html#%E6%A6%82%E8%A7%88",
      "line": 2385
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberCommitWork.old.js",
      "description": "调用componentDidMount",
      "line": 527
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberCommitWork.old.js",
      "description": "## 调用componentDidUpdate\n这一步很有意思 我一开始还好奇这个prevProps用来干啥 想想我们使用componentDidUpdate 可以在这个里面拿到最新的props和state coool",
      "line": 537,
      "selection": {
        "start": {
          "line": 536,
          "character": 17
        },
        "end": {
          "line": 536,
          "character": 26
        }
      }
    },
    {
      "file": "packages/react-reconciler/src/ReactFiberCommitWork.old.js",
      "description": "处理setState回调函数",
      "line": 632,
      "selection": {
        "start": {
          "line": 82,
          "character": 9
        },
        "end": {
          "line": 82,
          "character": 26
        }
      }
    }
  ],
  "ref": "v17.0.2"
}